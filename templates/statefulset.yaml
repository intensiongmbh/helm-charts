apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "keycloak.fullname" . }}
  namespace: {{ .Release.Namespace }}
  annotations:
    {{- range $key, $val := .Values.statefulSet.annotations }}
    {{- printf "%s: %s" $key ($val | quote) | nindent 4 }}
    {{- end }}
  labels:
    {{- range $key, $val := .Values.statefulSet.labels }}
    {{- printf "%s: %s" $key ($val | quote) | nindent 4 }}
    {{- end }}
    {{- include "keycloak.labels" . | nindent 4 }}
spec:
  serviceName: 
  selector:
    matchLabels:
      {{- include "keycloak.selectorLabels" . | nindent 6 }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  updateStrategy:
    type: {{ .Values.statefulSet.updateStrategy }}
  template:
    metadata:
      annotations:
        {{- range $key, $val := .Values.podAnnotations }}
        {{- printf "%s: %s" $key ($val | quote) | nindent 8 }}
        {{- end }}
      labels:
        {{- range $key, $val := .Values.podLabels }}
        {{- printf "%s: %s" $key ($val | quote) | nindent 8 }}
        {{- end }}
        {{- include "keycloak.selectorLabels" . | nindent 8 }}
    spec:
      containers:
      - name: keycloak
        {{- if .Values.image.digest}}
        image: "{{ .Values.image.repository }}@{{ .Values.image.digest }}"
        {{- else }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.command }}
        command:
          {{- toYaml .Values.command | nindent 10 }}
        {{- end }}
        {{- if.Values.args }}
        args:
          {{- toYaml .Values.args | nindent 10 }}
        {{- end }}
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        {{- if .Values.service.httpsPort }}
        - containerPort: 8443
          name: https
          protocol: TCP
        {{- end }}
        {{- range $port := .Values.extraPorts }}
        {{- toYaml $port | nindent 8 }}
        {{- end }}
        volumeMounts:
        {{- tpl .Values.extraVolumeMounts $ | nindent 8 }}
        env:
        {{- if and (.Values.http.relativePath) (eq .Values.http.relativePath "/") }}
        - name: KC_HTTP_RELATIVE_PATH
          value: {{ .Values.http.relativePath }}
        {{- else }}
        - name: KC_HTTP_RELATIVE_PATH
          value: {{ .Values.http.relativePath | trimSuffix "/" }}
        {{- end }}
        {{- if .Values.proxy.enabled }}
        - name: KC_PROXY
          value: {{ .Values.proxy.mode }}
        {{- end }}
        {{- if .Values.health.enabled }}
        - name: KC_HEALTH_ENABLED
          value: "true"
        {{- end }}
        {{- if .Values.metrics.enabled }}
        - name: KC_METRICS_ENABLED
          value: "true"
        {{- end }}
        {{- if .Values.database.vendor }}
        - name: KC_DB
          value: {{ .Values.database.vendor }}
        {{- end }}
        {{- if .Values.database.hostname }}
        - name: KC_DB_URL_HOST
          value: {{ .Values.database.hostname }}
        {{- end }}
        {{- if .Values.database.port }}
        - name: KC_DB_URL_PORT
          value: {{ .Values.database.port }}
        {{- end }}
        {{- if .Values.database.database }}
        - name: KC_DB_URL_DATABASE
          value: {{ .Values.database.database }}
        {{- end }}
        {{- if .Values.database.username }}
        - name: KC_DB_USERNAME
          value: {{ .Values.database.username }}
        {{- end }}
        {{- if .Values.database.existingSecret }}
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.existingSecret }}
              key: {{ .Values.database.existingSecretKey }}
        {{- else if .Values.database.password }}
        - name: KC_DB_PASSWORD
          value: {{ .Values.database.password }}
        {{- end }}
        {{- tpl .Values.extraEnv $ | nindent 8 }}
        envFrom:
          {{- tpl .Values.extraEnvFrom $ | nindent 10 }}
        volumeMounts:
          {{- tpl .Values.extraVolumeMounts $ | nindent 10 }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        {{- if .Values.health.enabled }}
        livenessProbe:
          {{- tpl .Values.livenessProbe $ | nindent 10 }}
        readinessProbe:
          {{- tpl .Values.readinessProbe $ | nindent 10 }}
        startupProbe:
          {{- tpl .Values.startupProbe $ | nindent 10 }}
        {{- end }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      enableServiceLinks: {{ .Values.enableServiceLinks }}
      nodeSelector: 
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      priorityClassName: {{ .Values.priorityClassName }}
      topologySpreadConstraints:
        {{- range $key, $val := .Values.topologySpreadConstraints }}
        {{- printf "%s: %s" $key ($val | quote) | nindent 4 }}
        {{- end }}
      restartPolicy: {{ .Values.restartPolicy }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      hostAliases:
        {{- toYaml .Values.hostAliases | nindent 8 }}
      serviceAccount: {{ include "keycloak.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        {{- with .Values.extraVolumes }}
        {{- tpl . $ | nindent 8 }}
        {{- end }}